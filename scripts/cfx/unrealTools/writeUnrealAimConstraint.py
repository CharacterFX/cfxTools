import random
import maya.cmds as cmds

def writeUnrealAimConstraint(aimjoint, aimAt, nodeName, nodeUid, pinComponentPose, pinAlpha, pinPose, pos, alphaNodeGuid, alphaPinGuid, lastNode = None):

    print(lastNode)
    if lastNode is not None:

        unrealNode = 'Begin Object Class=/Script/AnimGraph.AnimGraphNode_LookAt Name=\"'+nodeName+'\"\n   Node=(BoneToModify=(BoneName=\"'+aimjoint+'\"),LookAtTarget=(BoneReference=(BoneName=\"'+aimAt+'\")),LookAtLocation=(X=0.000000,Y=0.000000,Z=0.000000),LookAt_Axis=(Axis=(X=0.000000,Y=-1.000000,Z=0.000000)),LookUp_Axis=(Axis=(X=0.000000,Y=1.000000,Z=0.000000)))\n   ShowPinForProperties(0)=(PropertyName=\"BoneToModify\",PropertyFriendlyName=\"Bone to Modify\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:BoneToModify\", \"Name of bone to control. This is the main bone chain to modify from. *\"),CategoryName=\"SkeletalControl\")\n   ShowPinForProperties(1)=(PropertyName=\"LookAtTarget\",PropertyFriendlyName=\"Look at Target\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:LookAtTarget\", \"Target socket to look at. Used if LookAtBone is empty. - You can use  LookAtLocation if you need offset from this point. That location will be used in their local space. *\"),CategoryName=\"Target\")\n   ShowPinForProperties(2)=(PropertyName=\"LookAtLocation\",PropertyFriendlyName=\"Look at Location\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:LookAtLocation\", \"Target Offset. It\'s in world space if LookAtBone is empty or it is based on LookAtBone or LookAtSocket in their local space\"),CategoryName=\"Target\",bCanToggleVisibility=True)\n   ShowPinForProperties(3)=(PropertyName=\"LookAt_Axis\",PropertyFriendlyName=\"Look at Axis\",PropertyTooltip=NSLOCTEXT(\"\", \"29FFCC2F4BBEEA9166D94D842DB0D356\", \"Look at Axis\"),CategoryName=\"SkeletalControl\")\n   ShowPinForProperties(4)=(PropertyName=\"bUseLookUpAxis\",PropertyFriendlyName=\"Use Look Up Axis\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:bUseLookUpAxis\", \"Whether or not to use Look up axis\"),CategoryName=\"SkeletalControl\")\n   ShowPinForProperties(5)=(PropertyName=\"LookUp_Axis\",PropertyFriendlyName=\"Look Up Axis\",PropertyTooltip=NSLOCTEXT(\"\", \"145A5811443B8A3D8883C9A3112B0BE4\", \"Look Up Axis\"),CategoryName=\"SkeletalControl\")\n   ShowPinForProperties(6)=(PropertyName=\"LookAtClamp\",PropertyFriendlyName=\"Look at Clamp\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:LookAtClamp\", \"Look at Clamp value in degree - if you\'re look at axis is Z, only X, Y degree of clamp will be used\"),CategoryName=\"SkeletalControl\",bCanToggleVisibility=True)\n   ShowPinForProperties(7)=(PropertyName=\"InterpolationType\",PropertyFriendlyName=\"Interpolation Type\",PropertyTooltip=NSLOCTEXT(\"\", \"4686B7B446FDFBF4C75BD897714E82D0\", \"Interpolation Type\"),CategoryName=\"SkeletalControl\",bCanToggleVisibility=True)\n   ShowPinForProperties(8)=(PropertyName=\"InterpolationTime\",PropertyFriendlyName=\"Interpolation Time\",PropertyTooltip=NSLOCTEXT(\"\", \"AA2893FA48BBE69C90A80EA2B8C0986D\", \"Interpolation Time\"),CategoryName=\"SkeletalControl\",bCanToggleVisibility=True)\n   ShowPinForProperties(9)=(PropertyName=\"InterpolationTriggerThreashold\",PropertyFriendlyName=\"Interpolation Trigger Threashold\",PropertyTooltip=NSLOCTEXT(\"\", \"4C29C6B94A62862DBDCFCDB3E754FC1C\", \"Interpolation Trigger Threashold\"),CategoryName=\"SkeletalControl\",bCanToggleVisibility=True)\n   ShowPinForProperties(10)=(PropertyName=\"ComponentPose\",PropertyFriendlyName=\"Component Pose\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_SkeletalControlBase:ComponentPose\", \"Input link\"),CategoryName=\"Links\",bShowPin=True)\n   ShowPinForProperties(11)=(PropertyName=\"Alpha\",PropertyFriendlyName=\"Alpha\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_SkeletalControlBase:Alpha\", \"Current strength of the skeletal control\"),CategoryName=\"Settings\",bShowPin=True,bCanToggleVisibility=True)\n   ShowPinForProperties(12)=(PropertyName=\"AlphaScaleBias\",PropertyFriendlyName=\"Alpha Scale Bias\",PropertyTooltip=NSLOCTEXT(\"\", \"F767E3EB484C0DC7C34C96935A364FE0\", \"Alpha Scale Bias\"),CategoryName=\"Settings\")\n   ShowPinForProperties(13)=(PropertyName=\"LODThreshold\",PropertyFriendlyName=\"LOD Threshold\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_SkeletalControlBase:LODThreshold\", \"* Max LOD that this node is allowed to run\\n* For example if you have LODThreadhold to be 2, it will run until LOD 2 (based on 0 index)\\n* when the component LOD becomes 3, it will stop update/evaluate\\n* currently transition would be issue and that has to be re-visited\"),CategoryName=\"Performance\")\n   NodePosX='+str(pos[0])+'\n   NodePosY='+str(pos[1])+'\n   NodeGuid='+nodeUid+'\n   CustomProperties Pin (PinId='+pinComponentPose+',PinName=\"ComponentPose\",PinFriendlyName=NSLOCTEXT(\"\", \"6D0EA319486877FF474E8493B9A350D7\", \"Component Pose\"),PinToolTip=\"Component Pose\\nComponent Space Pose Link Structure\\n\\nInput link\",PinType.PinCategory=\"struct\",PinType.PinSubCategory=\"\",PinType.PinSubCategoryObject=ScriptStruct\'\"/Script/Engine.ComponentSpacePoseLink\"\',PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsArray=False,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,DefaultValue=\"(LinkID=-1,SourceLinkID=-1)\",AutogeneratedDefaultValue=\"(LinkID=-1,SourceLinkID=-1)\",LinkedTo=('+lastNode[0]+' '+lastNode[4]+',),PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)\n   CustomProperties Pin (PinId='+pinAlpha+',PinName=\"Alpha\",PinFriendlyName=NSLOCTEXT(\"\", \"58CD0FE248CD914C3634A2AFF19E4AA0\", \"Alpha\"),PinToolTip=\"Alpha\\nFloat\\n\\nCurrent strength of the skeletal control\",PinType.PinCategory=\"float\",PinType.PinSubCategory=\"\",PinType.PinSubCategoryObject=None,PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsArray=False,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,DefaultValue=\"1.000000\",AutogeneratedDefaultValue=\"1.000000\",LinkedTo=(aimConstraint_variableGet_0 '+alphaPinGuid+',),PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)\n   CustomProperties Pin (PinId='+pinPose+',PinName=\"Pose\",Direction=\"EGPD_Output\",PinType.PinCategory=\"struct\",PinType.PinSubCategory=\"\",PinType.PinSubCategoryObject=ScriptStruct\'\"/Script/Engine.ComponentSpacePoseLink\"\',PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsArray=False,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)\nEnd Object\n'
    else:
        unrealNode = 'Begin Object Class=/Script/AnimGraph.AnimGraphNode_LookAt Name=\"'+nodeName+'\"\n   Node=(BoneToModify=(BoneName=\"'+aimjoint+'\"),LookAtTarget=(BoneReference=(BoneName=\"'+aimAt+'\")),LookAtLocation=(X=0.000000,Y=0.000000,Z=0.000000),LookAt_Axis=(Axis=(X=0.000000,Y=-1.000000,Z=0.000000)),LookUp_Axis=(Axis=(X=0.000000,Y=1.000000,Z=0.000000)))\n   ShowPinForProperties(0)=(PropertyName=\"BoneToModify\",PropertyFriendlyName=\"Bone to Modify\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:BoneToModify\", \"Name of bone to control. This is the main bone chain to modify from. *\"),CategoryName=\"SkeletalControl\")\n   ShowPinForProperties(1)=(PropertyName=\"LookAtTarget\",PropertyFriendlyName=\"Look at Target\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:LookAtTarget\", \"Target socket to look at. Used if LookAtBone is empty. - You can use  LookAtLocation if you need offset from this point. That location will be used in their local space. *\"),CategoryName=\"Target\")\n   ShowPinForProperties(2)=(PropertyName=\"LookAtLocation\",PropertyFriendlyName=\"Look at Location\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:LookAtLocation\", \"Target Offset. It\'s in world space if LookAtBone is empty or it is based on LookAtBone or LookAtSocket in their local space\"),CategoryName=\"Target\",bCanToggleVisibility=True)\n   ShowPinForProperties(3)=(PropertyName=\"LookAt_Axis\",PropertyFriendlyName=\"Look at Axis\",PropertyTooltip=NSLOCTEXT(\"\", \"29FFCC2F4BBEEA9166D94D842DB0D356\", \"Look at Axis\"),CategoryName=\"SkeletalControl\")\n   ShowPinForProperties(4)=(PropertyName=\"bUseLookUpAxis\",PropertyFriendlyName=\"Use Look Up Axis\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:bUseLookUpAxis\", \"Whether or not to use Look up axis\"),CategoryName=\"SkeletalControl\")\n   ShowPinForProperties(5)=(PropertyName=\"LookUp_Axis\",PropertyFriendlyName=\"Look Up Axis\",PropertyTooltip=NSLOCTEXT(\"\", \"145A5811443B8A3D8883C9A3112B0BE4\", \"Look Up Axis\"),CategoryName=\"SkeletalControl\")\n   ShowPinForProperties(6)=(PropertyName=\"LookAtClamp\",PropertyFriendlyName=\"Look at Clamp\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_LookAt:LookAtClamp\", \"Look at Clamp value in degree - if you\'re look at axis is Z, only X, Y degree of clamp will be used\"),CategoryName=\"SkeletalControl\",bCanToggleVisibility=True)\n   ShowPinForProperties(7)=(PropertyName=\"InterpolationType\",PropertyFriendlyName=\"Interpolation Type\",PropertyTooltip=NSLOCTEXT(\"\", \"4686B7B446FDFBF4C75BD897714E82D0\", \"Interpolation Type\"),CategoryName=\"SkeletalControl\",bCanToggleVisibility=True)\n   ShowPinForProperties(8)=(PropertyName=\"InterpolationTime\",PropertyFriendlyName=\"Interpolation Time\",PropertyTooltip=NSLOCTEXT(\"\", \"AA2893FA48BBE69C90A80EA2B8C0986D\", \"Interpolation Time\"),CategoryName=\"SkeletalControl\",bCanToggleVisibility=True)\n   ShowPinForProperties(9)=(PropertyName=\"InterpolationTriggerThreashold\",PropertyFriendlyName=\"Interpolation Trigger Threashold\",PropertyTooltip=NSLOCTEXT(\"\", \"4C29C6B94A62862DBDCFCDB3E754FC1C\", \"Interpolation Trigger Threashold\"),CategoryName=\"SkeletalControl\",bCanToggleVisibility=True)\n   ShowPinForProperties(10)=(PropertyName=\"ComponentPose\",PropertyFriendlyName=\"Component Pose\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_SkeletalControlBase:ComponentPose\", \"Input link\"),CategoryName=\"Links\",bShowPin=True)\n   ShowPinForProperties(11)=(PropertyName=\"Alpha\",PropertyFriendlyName=\"Alpha\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_SkeletalControlBase:Alpha\", \"Current strength of the skeletal control\"),CategoryName=\"Settings\",bShowPin=True,bCanToggleVisibility=True)\n   ShowPinForProperties(12)=(PropertyName=\"AlphaScaleBias\",PropertyFriendlyName=\"Alpha Scale Bias\",PropertyTooltip=NSLOCTEXT(\"\", \"F767E3EB484C0DC7C34C96935A364FE0\", \"Alpha Scale Bias\"),CategoryName=\"Settings\")\n   ShowPinForProperties(13)=(PropertyName=\"LODThreshold\",PropertyFriendlyName=\"LOD Threshold\",PropertyTooltip=NSLOCTEXT(\"UObjectToolTips\", \"AnimNode_SkeletalControlBase:LODThreshold\", \"* Max LOD that this node is allowed to run\\n* For example if you have LODThreadhold to be 2, it will run until LOD 2 (based on 0 index)\\n* when the component LOD becomes 3, it will stop update/evaluate\\n* currently transition would be issue and that has to be re-visited\"),CategoryName=\"Performance\")\n   NodePosX='+str(pos[0])+'\n   NodePosY='+str(pos[1])+'\n   NodeGuid='+nodeUid+'\n   CustomProperties Pin (PinId='+pinComponentPose+',PinName=\"ComponentPose\",PinFriendlyName=NSLOCTEXT(\"\", \"6D0EA319486877FF474E8493B9A350D7\", \"Component Pose\"),PinToolTip=\"Component Pose\\nComponent Space Pose Link Structure\\n\\nInput link\",PinType.PinCategory=\"struct\",PinType.PinSubCategory=\"\",PinType.PinSubCategoryObject=ScriptStruct\'\"/Script/Engine.ComponentSpacePoseLink\"\',PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsArray=False,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,DefaultValue=\"(LinkID=-1,SourceLinkID=-1)\",AutogeneratedDefaultValue=\"(LinkID=-1,SourceLinkID=-1)\",PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)\n   CustomProperties Pin (PinId='+pinAlpha+',PinName=\"Alpha\",PinFriendlyName=NSLOCTEXT(\"\", \"58CD0FE248CD914C3634A2AFF19E4AA0\", \"Alpha\"),PinToolTip=\"Alpha\\nFloat\\n\\nCurrent strength of the skeletal control\",PinType.PinCategory=\"float\",PinType.PinSubCategory=\"\",PinType.PinSubCategoryObject=None,PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsArray=False,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,DefaultValue=\"1.000000\",AutogeneratedDefaultValue=\"1.000000\",LinkedTo=(aimConstraint_variableGet_0 '+alphaPinGuid+',),PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)\n   CustomProperties Pin (PinId='+pinPose+',PinName=\"Pose\",Direction=\"EGPD_Output\",PinType.PinCategory=\"struct\",PinType.PinSubCategory=\"\",PinType.PinSubCategoryObject=ScriptStruct\'\"/Script/Engine.ComponentSpacePoseLink\"\',PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsArray=False,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)\nEnd Object\n'
    
    return unrealNode

def exportAll(filename):

    aimCons = cmds.ls(type='aimConstraint')
	
    posX = 0
    posY = 0

    xCount = 0
    xCountReset = 5

    file = open(filename,"w") 

    #do float variable to connect all to alpha
    alphaNodeGuid = ''.join(random.choice('0123456789ABCDEF') for i in range(32))
    alphaPinGuid = ''.join(random.choice('0123456789ABCDEF') for i in range(32))

    file.write("Begin Object Class=/Script/BlueprintGraph.K2Node_VariableGet Name=\"aimConstraint_variableGet_0\"\n   VariableReference=(MemberName=\"aimConstraint\",MemberGuid=7F6BE0604957E0625E6CDBADEA3F1062,bSelfContext=True)\n   NodePosX=0\n   NodePosY=-200\n   NodeGuid="+alphaNodeGuid+"\n   CustomProperties Pin (PinId="+alphaPinGuid+",PinName=\"aimConstraint\",Direction=\"EGPD_Output\",PinType.PinCategory=\"float\",PinType.PinSubCategory=\"\",PinType.PinSubCategoryObject=None,PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsArray=False,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,DefaultValue=\"0.0\",AutogeneratedDefaultValue=\"0.0\",PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)\n   CustomProperties Pin (PinId=71BEEF6A4633DA9C153884A57E6A68ED,PinName=\"self\",PinFriendlyName=NSLOCTEXT(\"K2Node\", \"Target\", \"Target\"),PinType.PinCategory=\"object\",PinType.PinSubCategory=\"\",PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsArray=False,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,PersistentGuid=00000000000000000000000000000000,bHidden=True,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)\nEnd Object\n")

    pinComponentPose = ''.join(random.choice('0123456789ABCDEF') for i in range(32))
    pinAlpha = ''.join(random.choice('0123456789ABCDEF') for i in range(32))
    pinPose = ''.join(random.choice('0123456789ABCDEF') for i in range(32))

    lastNode = None

    #for ac in aimCons:
    for idx, ac in enumerate(aimCons):

        nodeId = ''.join(random.choice('0123456789ABCDEF') for i in range(32))

        theAimer = cmds.listConnections(ac+'.constraintRotateX', s=0,d=1)
        targets = cmds.listConnections(ac+'.target', s=1,d=0, type='joint')
        theTarget = list(set(targets))[0]
        file.write( writeUnrealAimConstraint(theAimer[0], theTarget, ac, nodeId, pinComponentPose, pinAlpha, pinPose, [posX,posY], alphaNodeGuid, alphaPinGuid, lastNode))

        posX += 300
        xCount +=1
        print('xCount is : ', xCount)
        if xCount > xCountReset:
            xCount = 0
            posX = 0
            posY += 200

        lastNode = [ac,nodeId, pinComponentPose, pinAlpha, pinPose]

    file.close() 